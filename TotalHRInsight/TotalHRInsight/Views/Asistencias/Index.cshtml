@model IEnumerable<TotalHRInsight.Models.Asistencia.AsistenciaModel>

@{
    ViewData["Title"] = "Registro de Asistencias";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid bg-light">
    <div class="row align-items-center mb-4">
        <div class="col-md-6">
            <h1 class="display-6 text-gray-500 mb-0">Registro de Asistencias</h1>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group" role="group">
                <a asp-action="Create" class="btn btn-primary" onclick="showLoader()">
                    <i class="bi bi-plus-circle me-2"></i>Registro Manual
                </a>
                <a
                   class="btn btn-success" onclick="descargarExcel()">
                    <i class="bi bi-download me-2"></i>Descargar Datos
                </a>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-5 ">
            <div class="card border-0 shadow-sm ">
                <div class="card-header bg-white border-0">
                    <div class="input-group mb-3">
                        <input type="text" id="searchInput" class="form-control" placeholder="Buscar por nombre">
                        <input type="date" id="startDateInput" class="form-control">
                        <input type="date" id="endDateInput" class="form-control">
                        <button class="btn btn-primary" type="button" onclick="filterCards()">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body pt-0" style="max-height: 65vh; overflow-y: auto;">
                    <div id="cardContainer">
                        
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-0">
                    <div id="map" style="width: 100%; height: 75vh; border-radius: 0.5rem;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.Partial("_LoaderModal")

<script src="~/lib/leaflet/leaflet.js"></script>
<script src="~/lib/leaflet/leaflet.min.js"></script>
<script src="~/js/loader.js"></script>
<script>

    function toggleSearchPanel() {
        const panel = document.getElementById('searchPanel');
        panel.classList.toggle('d-none');
    }

    var map = L.map('map').setView([9.895403, -84.063574], 15);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var Rojo = L.icon({
        iconUrl: '/Images/Rojo.png',
        iconSize: [25, 45],
        iconAnchor: [15, 45],
        popupAnchor: [-3, -46],
    });

    var Verde = L.icon({
        iconUrl: '/Images/Verde.png',
        iconSize: [25, 45],
        iconAnchor: [15, 45],
        popupAnchor: [-3, -46],
    });

    var markers = [];
    var jsModel = @Html.Raw(Json.Serialize(Model));

    updateMarkers(jsModel);

    function updateMarkers(data) {
        markers.forEach(marker => {
            map.removeLayer(marker);
        });

        markers = [];

        for (var i in data) {
            var item = data[i];

            try {
                var entradaLat = parseFloat(item.latitudEntrada);
                var entradaLng = parseFloat(item.longitudEntrada);
                var salidaLat = parseFloat(item.latitudSalida);
                var salidaLng = parseFloat(item.longitudSalida);

                if (isNaN(entradaLat) || isNaN(entradaLng) || isNaN(salidaLat) || isNaN(salidaLng)) {
                    console.error("Latitud o longitud no válida para el elemento con ID " + item.id);
                    continue;
                }

                var entradaMarker = L.marker([entradaLat, entradaLng], { icon: Verde })
                    .bindPopup(item.nombre + ' ' + item.primerApellido + ' ' + item.segundoApellido + '<br>' + item.fechaEntrada + '<br>' + 'Entrada');

                markers.push(entradaMarker);
                entradaMarker.addTo(map);

                var salidaMarker = L.marker([salidaLat, salidaLng], { icon: Rojo })
                    .bindPopup(item.nombre + ' ' + item.primerApellido + ' ' + item.segundoApellido + '<br>' + item.fechaSalida + '<br>' + 'Salida');

                markers.push(salidaMarker);
                salidaMarker.addTo(map);
            } catch (error) {
                console.error("Error al procesar el marcador para el elemento con ID " + item.id + ": " + error);
            }
        }
    }
    function filterCards() {
        var searchInput = document.getElementById('searchInput').value.trim();
        var startDateInput = document.getElementById('startDateInput').value;
        var endDateInput = document.getElementById('endDateInput').value;

        $.ajax({
            url: '/Asistencias/FiltroAsistencia',
            type: 'GET',
            data: {
                nombre: searchInput,
                fechaIngreso: startDateInput || null,
                fechaSalida: endDateInput || null
            },
            beforeSend: function () {
                // Mostrar spinner en el contenedor de tarjetas
                // $('#cardContainer').html(`
                //     <div class="text-center p-5">
                //         <div class="spinner-border text-danger" role="status">
                //             <span class="visually-hidden">Cargando...</span>
                //         </div>
                //         <p class="mt-3">Buscando registros...</p>
                //     </div>
                // `);
            },
            success: function (data) {
                try {
                var cardContainer = document.getElementById('cardContainer');
                cardContainer.innerHTML = ''; // Limpiar contenedor actual

                data.forEach(function (item) {
                    var cardHtml = `
                        <div class="card mb-3 border-0 shadow-sm hover-lift asistencia-card"
                             id="card-${item.id}"
                             data-lat-entrada="${item.latitudEntrada}"
                             data-lng-entrada="${item.longitudEntrada}"
                             data-lat-salida="${item.latitudSalida}"
                             data-lng-salida="${item.longitudSalida}">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="card-title mb-0" id="nombre-${item.id}">
                                        ${item.nombre} ${item.primerApellido} ${item.segundoApellido}
                                    </h5>
                                </div>
                                <div class="list-group list-group-flush mb-3">
                                    <div class="list-group-item d-flex justify-content-between px-0">
                                        <span class="text-muted">Entrada:</span>
                                        <strong id="fecha-entrada-${item.id}" class="fecha-entrada">
                                            ${new Date(item.fechaEntrada).toLocaleString()}
                                        </strong>
                                    </div>
                                    <div class="list-group-item d-flex justify-content-between px-0">
                                        <span class="text-muted">Salida:</span>
                                        <strong id="fecha-salida-${item.id}" class="fecha-salida">
                                            ${new Date(item.fechaSalida).toLocaleString()}
                                        </strong>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between gap-2">
                                    <a href="/Asistencias/Edit/${item.id}" class="btn btn-outline-warning btn-sm flex-grow-1">
                                        <i class="bi bi-pencil-square me-2"></i>Editar
                                    </a>
                                </div>
                            </div>
                        </div>
                    `;
                    cardContainer.innerHTML += cardHtml;
                });

                // Actualizar marcadores en el mapa
                updateMarkers(data);
                // Ocultar el loader después de procesar los datos
            } catch(error) {
                    $('#cardContainer').html(`
                    <div class="alert alert-danger text-center">
                        Error al realizar la búsqueda. Por favor, intente nuevamente.
                    </div>
                `);
            }
            },
            error: function (error) {
                $('#cardContainer').html(`
                    <div class="alert alert-danger text-center">
                        Error al realizar la búsqueda. Por favor, intente nuevamente.
                    </div>
                `);
            }
        });
    }

    function descargarExcel() {
        const nombre = document.getElementById('searchInput').value;
        const fechaEntrada = document.getElementById('startDateInput').value;
        const fechaSalida = document.getElementById('endDateInput').value;

        $.ajax({
            url: 'Asistencias/ExportToExcel',
            type: 'GET',
            data: {
                nombre: nombre,
                fechaIngreso: fechaEntrada || null,
                fechaSalida: fechaSalida || null
            },
            xhrFields: {
                responseType: 'blob' // Importante para recibir el archivo
            },
            beforeSend: function () {
                // Aquí puedes mostrar un loader
                LoaderManager.show('Generando Excel...');
            },
            success: function (blob) {
                // Crear URL del blob
                const url = window.URL.createObjectURL(blob);

                // Crear enlace temporal
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;

                // Nombre del archivo
                a.download = 'Control_Asistencias_' + new Date().toISOString().split('T')[0] + '.xlsx';

                // Agregar a documento, hacer clic y remover
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            },
            error: function (xhr, status, error) {
                console.error('Error al descargar el archivo:', error);
                // Usar el modal de Bootstrap para mostrar el error
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error al generar el archivo Excel'
                });
            },
            complete: function () {
                LoaderManager.hide();
            }
        });

    }


</script>

