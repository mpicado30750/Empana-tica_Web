@model IEnumerable<TotalHRInsight.Models.AsistenciaModel>

@{
    ViewData["Title"] = "Lista de Asistencias";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid asistencia-container">
    <div class="row">
        <div class="mt-4">
            <a asp-action="Create" class="btn btn-danger" onclick="showLoader()">
                <i class="bi bi-plus-circle"></i> Crear registro manual
            </a>
            <a asp-action="ExportToExcel" class="btn btn-success" onclick="showLoader()">
                <i class="bi bi-download"></i> Descargar datos
            </a>
        </div>
        <br />
        <br />
        <br />
        <div class="col-md-5" style="height: 600px; overflow-y: scroll;">
            <div class="input-group mb-3">
                <input type="text" id="searchInput" class="form-control" placeholder="Nombre">
                <input type="date" id="startDateInput" class="form-control">
                <input type="date" id="endDateInput" class="form-control">
                <button class="btn btn-danger" type="button" onclick="filterCards()">Buscar</button>
            </div>
            <div id="cardContainer">
                @foreach (var item in Model)
                {
                    <div class="card mb-4 asistencia-card" id="card-@item.Id"
                         data-lat-entrada="@item.LatitudEntrada.ToString().Replace(',', '.')"
                         data-lng-entrada="@item.LongitudEntrada.ToString().Replace(',', '.')"
                         data-lat-salida="@item.LatitudSalida.ToString().Replace(',', '.')"
                         data-lng-salida="@item.LongitudSalida.ToString().Replace(',', '.')">
                        <div class="card-body">
                            <h5 class="card-title" id="nombre-@item.Id">
                                @item.Nombre @item.PrimerApellido @item.SegundoApellido
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn">
                                    <i class="bi bi-info-circle fs-4"></i>
                                </a>
                            </h5>
                            <p class="card-text">
                                <strong>Fecha Entrada:</strong>
                                <span id="fecha-entrada-@item.Id" class="fecha-entrada">@item.FechaEntrada.ToString("dd/MM/yyyy HH:mm")</span><br />
                                <strong>Fecha Salida:</strong>
                                <span id="fecha-salida-@item.Id" class="fecha-salida">@item.FechaSalida.ToString("dd/MM/yyyy HH:mm")</span><br />
                            </p>
                            <div class="text-center">
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">
                                    <i class="bi bi-trash"></i> Eliminar
                                </a>
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning">
                                    <i class="bi bi-pencil-square"></i> Editar
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-7">
            <div id="map" style="width: 100%; height: 600px;"></div>
        </div>
    </div>
</div>

@Html.Partial("_LoaderModal")

<script src="~/lib/leaflet/leaflet.js"></script>
<script src="~/lib/leaflet/leaflet.min.js"></script>
<script src="~/js/loader.js"></script>
<script>
    var map = L.map('map').setView([9.895403, -84.063574], 15);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var Rojo = L.icon({
        iconUrl: '/Images/Rojo.png',
        iconSize: [25, 45],
        iconAnchor: [15, 45],
        popupAnchor: [-3, -46],
    });

    var Verde = L.icon({
        iconUrl: '/Images/Verde.png',
        iconSize: [25, 45],
        iconAnchor: [15, 45],
        popupAnchor: [-3, -46],
    });

    var markers = [];
    var jsModel = @Html.Raw(Json.Serialize(Model));

    updateMarkers(jsModel);

    function updateMarkers(data) {
        markers.forEach(marker => {
            map.removeLayer(marker);
        });

        markers = [];

        for (var i in data) {
            var item = data[i];

            try {
                var entradaLat = parseFloat(item.latitudEntrada);
                var entradaLng = parseFloat(item.longitudEntrada);
                var salidaLat = parseFloat(item.latitudSalida);
                var salidaLng = parseFloat(item.longitudSalida);

                if (isNaN(entradaLat) || isNaN(entradaLng) || isNaN(salidaLat) || isNaN(salidaLng)) {
                    console.error("Latitud o longitud no válida para el elemento con ID " + item.id);
                    continue;
                }

                var entradaMarker = L.marker([entradaLat, entradaLng], { icon: Verde })
                    .bindPopup(item.nombre + ' ' + item.primerApellido + ' ' + item.segundoApellido + '<br>' + item.fechaEntrada + '<br>' + 'Entrada');

                markers.push(entradaMarker);
                entradaMarker.addTo(map);

                var salidaMarker = L.marker([salidaLat, salidaLng], { icon: Rojo })
                    .bindPopup(item.nombre + ' ' + item.primerApellido + ' ' + item.segundoApellido + '<br>' + item.fechaSalida + '<br>' + 'Salida');

                markers.push(salidaMarker);
                salidaMarker.addTo(map);
            } catch (error) {
                console.error("Error al procesar el marcador para el elemento con ID " + item.id + ": " + error);
            }
        }
    }

    function filterCards() {
        try {
            var searchInput = document.getElementById('searchInput').value.toLowerCase();
            var startDateInput = document.getElementById('startDateInput').value;
            var endDateInput = document.getElementById('endDateInput').value;

            var cards = document.getElementsByClassName('asistencia-card');
            var filteredData = [];

            for (var i = 0; i < cards.length; i++) {
                var card = cards[i];
                var cardId = card.id.split('-')[1];

                var nombre = document.getElementById(`nombre-${cardId}`).textContent.toLowerCase();
                var fechaEntrada = document.getElementById(`fecha-entrada-${cardId}`).textContent.trim();
                var fechaSalida = document.getElementById(`fecha-salida-${cardId}`).textContent.trim();

                var isVisible = true;

                if (searchInput && !nombre.includes(searchInput)) {
                    isVisible = false;
                }

                if (startDateInput || endDateInput) {
                    var entradaDate = new Date(fechaEntrada.split('/').reverse().join('-')).toISOString().split('T')[0];
                    var salidaDate = new Date(fechaSalida.split('/').reverse().join('-')).toISOString().split('T')[0];

                    if (startDateInput && entradaDate < new Date(startDateInput).toISOString().split('T')[0]) {
                        isVisible = false;
                    }

                    if (endDateInput && entradaDate > new Date(endDateInput).toISOString().split('T')[0]) {
                        isVisible = false;
                    }
                }

                card.style.display = isVisible ? "block" : "none";

                if (isVisible) {
                    filteredData.push({
                        latitudEntrada: card.getAttribute('data-lat-entrada'),
                        longitudEntrada: card.getAttribute('data-lng-entrada'),
                        latitudSalida: card.getAttribute('data-lat-salida'),
                        longitudSalida: card.getAttribute('data-lng-salida'),
                        nombre: nombre,
                        primerApellido: document.getElementById(`nombre-${cardId}`).textContent.trim().split(' ')[1],
                        segundoApellido: document.getElementById(`nombre-${cardId}`).textContent.trim().split(' ')[2],
                        fechaEntrada: fechaEntrada,
                        fechaSalida: fechaSalida
                    });
                }
            }

            updateMarkers(filteredData);
        } catch (error) {
            console.error("Error en filterCards: " + error);
        }
    }
</script>

