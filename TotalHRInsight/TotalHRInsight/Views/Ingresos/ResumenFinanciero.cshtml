@{
    ViewData["Title"] = "Resumen Financiero";
}

@Html.Partial("_LoaderModal")

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary bg-gradient text-white">
                    <h2 class="h4 mb-0">Resumen Financiero</h2>
                </div>
                <div class="card-body">
                    <!-- Filtros y Exportación -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-3">
                            <label for="startDate" class="form-label">Fecha de inicio</label>
                            <input type="date" id="startDate" class="form-control">
                        </div>
                        <div class="col-md-3">
                            <label for="endDate" class="form-label">Fecha de fin</label>
                            <input type="date" id="endDate" class="form-control">
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button onclick="filtrarDatos()" class="btn btn-primary">
                                <i class="bi bi-funnel me-2"></i>Filtrar
                            </button>
                        </div>
                        <div class="col-md-3 d-flex align-items-end justify-content-end">
                            <button onclick="exportarExcel()" class="btn btn-success">
                                <i class="bi bi-file-earmark-excel me-2"></i>Exportar a Excel
                            </button>
                        </div>
                    </div>

                    <!-- Tarjetas de Resumen -->
                    <div class="row g-4 mb-4">
                        <div class="col-md-4">
                            <div class="card bg-light h-100">
                                <div class="card-body">
                                    <h6 class="card-title text-primary mb-3">Total Ingresos</h6>
                                    <h3 id="totalIngresos" class="mb-0">₡ @Model.TotalIngresos.ToString("N2")</h3>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light h-100">
                                <div class="card-body">
                                    <h6 class="card-title text-danger mb-3">Total Gastos</h6>
                                    <h3 id="totalGastos" class="mb-0">₡ @Model.TotalGastos.ToString("N2")</h3>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light h-100">
                                <div class="card-body">
                                    <h6 class="card-title text-success mb-3">Balance</h6>
                                    <h3 id="balance" class="mb-0">₡ @Model.Balance.ToString("N2")</h3>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Gráficos -->
                    <div class="row g-4">
                        <div class="col-md-4">
                            <div class="card shadow-sm h-100">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Comparativa</h6>
                                </div>
                                <div class="card-body">
                                    <div style="height: 300px;">
                                        <canvas id="resumenChartBar"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card shadow-sm h-100">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Distribución</h6>
                                </div>
                                <div class="card-body">
                                    <div style="height: 300px;">
                                        <canvas id="resumenChartPie"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card shadow-sm h-100">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Tendencia</h6>
                                </div>
                                <div class="card-body">
                                    <div style="height: 300px;">
                                        <canvas id="resumenChartLine"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let resumenChartBar, resumenChartPie, resumenChartLine;

        function formatCurrency(value) {
            return '₡' + value.toLocaleString('es-CR', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }

        function updateDisplayValues(ingresos, gastos, balance) {
            document.getElementById('totalIngresos').textContent = formatCurrency(ingresos);
            document.getElementById('totalGastos').textContent = formatCurrency(gastos);
            document.getElementById('balance').textContent = formatCurrency(balance);
        }

        function toggleLoader(show = true) {
            if (show) {
                $('#loaderModal').modal('show');
            } else {
                $('#loaderModal').modal('hide');
            }
        }

        const commonOptions = {
            maintainAspectRatio: false,
            responsive: true,
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            return formatCurrency(tooltipItem.raw);
                        }
                    }
                },
                legend: {
                    position: 'bottom'
                }
            }
        };

        function initCharts(dataIngresos, dataGastos, dataBalance) {
            const ctxBar = document.getElementById('resumenChartBar').getContext('2d');
            resumenChartBar = new Chart(ctxBar, {
                type: 'bar',
                data: {
                    labels: ['Ingresos', 'Gastos', 'Balance'],
                    datasets: [{
                        label: 'Monto',
                        data: [dataIngresos, dataGastos, dataBalance],
                        backgroundColor: ['#0d6efd', '#dc3545', '#198754'],
                        borderColor: ['#0b5ed7', '#bb2d3b', '#157347'],
                        borderWidth: 1
                    }]
                },
                options: {
                    ...commonOptions,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: formatCurrency
                            }
                        }
                    }
                }
            });

            const ctxPie = document.getElementById('resumenChartPie').getContext('2d');
            resumenChartPie = new Chart(ctxPie, {
                type: 'doughnut',
                data: {
                    labels: ['Ingresos', 'Gastos', 'Balance'],
                    datasets: [{
                        data: [dataIngresos, dataGastos, dataBalance],
                        backgroundColor: ['#0d6efd', '#dc3545', '#198754'],
                        borderColor: ['#0b5ed7', '#bb2d3b', '#157347'],
                        borderWidth: 1
                    }]
                },
                options: commonOptions
            });

            const ctxLine = document.getElementById('resumenChartLine').getContext('2d');
            resumenChartLine = new Chart(ctxLine, {
                type: 'line',
                data: {
                    labels: ['Ingresos', 'Gastos', 'Balance'],
                    datasets: [{
                        label: 'Tendencia',
                        data: [dataIngresos, dataGastos, dataBalance],
                        borderColor: '#0dcaf0',
                        backgroundColor: 'rgba(13, 202, 240, 0.2)',
                        borderWidth: 2,
                        fill: true
                    }]
                },
                options: {
                    ...commonOptions,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: formatCurrency
                            }
                        }
                    }
                }
            });
        }

        async function exportarExcel() {
            try {
                toggleLoader(true);
                window.location.href = '@Url.Action("ExportarResumenFinanciero", "Ingresos")';

                // Esperar un momento antes de ocultar el loader
                setTimeout(() => {
                    toggleLoader(false);
                }, 9500);
            } catch (error) {
                console.error('Error:', error);
                alert('Error al exportar los datos');
                toggleLoader(false);
            }
        }

        async function filtrarDatos() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            if (!startDate || !endDate) {
                alert("Por favor, selecciona un rango de fechas válido.");
                return;
            }

            try {
                toggleLoader(true);

                const response = await fetch(`/Ingresos/ObtenerDatosFiltrados?startDate=${startDate}&endDate=${endDate}`);
                if (!response.ok) throw new Error('Error al obtener datos');

                const data = await response.json();

                if (data.success) {
                    updateDisplayValues(data.totalIngresos, data.totalGastos, data.balance);

                    const chartData = [data.totalIngresos, data.totalGastos, data.balance];

                    resumenChartBar.data.datasets[0].data = chartData;
                    resumenChartPie.data.datasets[0].data = chartData;
                    resumenChartLine.data.datasets[0].data = chartData;

                    resumenChartBar.update();
                    resumenChartPie.update();
                    resumenChartLine.update();
                } else {
                    alert(data.message || 'Error al obtener los datos filtrados');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al obtener los datos filtrados');
            } finally {
                toggleLoader(false);
            }
        }

        // Inicialización de gráficos
        initCharts(@Model.TotalIngresos, @Model.TotalGastos, @Model.Balance);
    </script>
}