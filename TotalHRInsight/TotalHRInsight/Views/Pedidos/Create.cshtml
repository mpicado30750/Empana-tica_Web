@model TotalHRInsight.Models.Pedidos.CrearPedido

@{
	ViewData["Title"] = "Crear Pedido";
	var productos = ViewData["Inventario"] as IEnumerable<TotalHRInsight.DAL.Inventario>;
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid vh-80 bg-light d-flex flex-column p-3">
	<div class="row flex-grow-1 g-3">
		<div class="col-md-6 d-flex flex-column">
			<div class="card shadow-sm border-0 rounded-lg d-flex flex-column h-100">
				<div class="card-header bg-primary text-white text-center py-3">
					<h1 class="h3 mb-0">Crear Nuevo Pedido</h1>
				</div>
				<div class="card-body p-4 overflow-auto">
					<form asp-action="Create" id="formCreatePedido" class="needs-validation" novalidate>
						<div class="row g-3">
							<div class="col-md-6">
								<div class="form-floating mb-3">
									<input asp-for="FechaEntrega" class="form-control" type="date"
										   min="@DateTime.Now.ToString("yyyy-MM-dd")"
										   placeholder="Fecha de Entrega"
										   required />
									<label asp-for="FechaEntrega" class="text-muted">Fecha de Entrega</label>
									<div class="invalid-feedback">Por favor seleccione una fecha válida</div>
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-floating mb-3">
									<select asp-for="IdSucursal" class="form-select" asp-items="ViewBag.IdSucursal" required>
										<option value="">Seleccione Sucursal</option>
									</select>
									<label asp-for="IdSucursal" class="text-muted">Sucursal</label>
									<div class="invalid-feedback">Por favor seleccione una sucursal</div>
								</div>
							</div>
						</div>

						<div class="card mb-4">
							<div class="card-header bg-light">
								<div class="input-group">
									<span class="input-group-text bg-white border-0"><i class="bi bi-search"></i></span>
									<input type="text" id="buscarProducto"
										   class="form-control border-0"
										   placeholder="Buscar producto...">
								</div>
							</div>
							<div class="table-responsive" style="max-height: 50vh; overflow-y: auto;">
								<table class="table table-hover" id="tablaProductos">
									<thead class="table-light sticky-top bg-white">
										<tr>
											<th>ID</th>
											<th>Producto</th>
											<th>Disponible</th>
											<th>Cantidad</th>
											<th>Acción</th>
										</tr>
									</thead>
									<tbody>
										@if (productos != null)
										{
											foreach (var producto in productos)
											{
												<tr>
													<td>@producto.ProductoId</td>
													<td>@producto.Producto.NombreProducto</td>
													<td class="cantidad-disponible text-success fw-bold">@producto.CantidadDisponible</td>
													<td>
														<input type="number"
															   id="cantidad_@producto.ProductoId"
															   class="form-control form-control-sm cantidad-input"
															   min="1"
															   max="@producto.CantidadDisponible"
															   value="1" />
													</td>
													<td>
														<button type="button"
																class="btn btn-outline-success btnAgregarProducto"
																data-id="@producto.ProductoId"
																data-nombre="@producto.Producto.NombreProducto"
																data-precio="@producto.Producto.PrecioUnitario">
															<i class="bi bi-plus-circle me-1"></i>Agregar
														</button>
													</td>
												</tr>
											}
										}
									</tbody>
								</table>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>
		<div class="col-md-6 d-flex flex-column">
			<div class="card flex-grow-1 shadow-sm border-0 rounded-lg">
				<div class="card-header bg-light py-3">
					<h3 class="h5 mb-0">
						<i class="bi bi-cart-check me-2 text-primary"></i>Productos Seleccionados
					</h3>
				</div>
				<div class="card-body p-0 overflow-auto">
					<table id="tablaProductosSeleccionados" class="table table-striped mb-0">
						<thead class="sticky-top bg-white">
							<tr>
								<th>Nombre</th>
								<th>Cantidad</th>
								<th>Precio Init.</th>
								<th>Subtotal</th>
							</tr>
						</thead>
						<tbody>
							<tr class="text-center text-muted">
								<td colspan="4">No hay productos seleccionados</td>
							</tr>
						</tbody>
					</table>
				</div>
				<div class="card-footer bg-light">
					<div class="d-flex justify-content-between align-items-center mb-3">
						<strong>Total:</strong>
						<input asp-for="MontoTotal" type="text"
							   class="form-control form-control-sm w-50 text-end"
							   id="MontoTotal"
							   readonly
							   placeholder="₡0.00" />
					</div>
					<input type="hidden" id="ProductosJson" name="ProductosJson" />
					<button type="submit"
							form="formCreatePedido"
							class="btn btn-primary w-100"
							id="btnCrearPedido">
						<i class="bi bi-cart-plus me-2"></i>Crear Pedido
					</button>
				</div>
			</div>
		</div>
	</div>
</div>


<style>
	.vh-80 {
		height: 85vh;
	}
</style>
@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
	<script>
		$(document).ready(function () {
			var listaProductos = [];

			// Código existente
			$(".cantidad-input").on('input', function () {
				var max = parseInt($(this).attr('max'));
				var value = parseInt($(this).val());
				if (value > max) {
					$(this).val(max);
				} else if (value < 1 || isNaN(value)) {
					$(this).val(1);
				}
			});

			// Nuevo código: Búsqueda de productos
			$("#buscarProducto").on("keyup", function () {
				var value = $(this).val().toLowerCase();
				$("#tablaProductos tbody tr").filter(function () {
					$(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
				});
			});

			// Código existente modificado
			$(".btnAgregarProducto").click(function () {
				var id = $(this).data("id");
				var nombre = $(this).data("nombre");
				var precio = parseFloat($(this).data("precio"));
				var cantidad = parseInt($("#cantidad_" + id).val());
				var disponible = parseInt($(this).closest('tr').find('.cantidad-disponible').text());

				if (isNaN(cantidad) || cantidad <= 0) {
					alert("Por favor, ingrese una cantidad válida mayor a 0.");
					return;
				}

				if (cantidad > disponible) {
					alert("La cantidad solicitada excede el stock disponible.");
					return;
				}

				var productoExistente = listaProductos.find(p => p.IdProducto == id);
				if (productoExistente) {
					// if (productoExistente.CantidadSeleccionada + cantidad > disponible) {
					// 	alert("La cantidad total excede el stock disponible.33333");
					// 	return;
					// }
					productoExistente.CantidadSeleccionada += cantidad;
				} else {
					listaProductos.push({
						IdProducto: id,
						NombreProducto: nombre,
						PrecioUnitario: precio,
						CantidadSeleccionada: cantidad
					});
				}

				var nuevaDisponible = disponible - cantidad;
				$(this).closest('tr').find('.cantidad-disponible').text(nuevaDisponible);
				$("#cantidad_" + id).attr('max', nuevaDisponible);
				if (nuevaDisponible === 0) {
					$(this).prop('disabled', true);
				}

				$("#cantidad_" + id).val(1);
				actualizarTablaProductosSeleccionados();
			});

			// Código existente modificado
			function actualizarTablaProductosSeleccionados() {
				var tabla = $("#tablaProductosSeleccionados").find("tbody");
				tabla.empty();
				var total = 0;

				listaProductos.forEach(function (producto, index) {
					var subtotal = producto.PrecioUnitario * producto.CantidadSeleccionada;
					total += subtotal;
					var fila = "<tr>" +
						"<td>" + producto.NombreProducto + "</td>" +
						"<td>" + producto.CantidadSeleccionada + "</td>" +
						"<td>₡" + producto.PrecioUnitario.toFixed(2) + "</td>" +
						
						"<td>₡" + subtotal.toFixed(2) + "</td>" +
						"<td><button type='button' class='btn btn-danger btnEliminarProducto' data-index='" + index + "'>Eliminar</button></td>" +
						"</tr>";
					tabla.append(fila);
				});

				$("#MontoTotal").val(total.toFixed(2));
				$("#ProductosJson").val(JSON.stringify(listaProductos));

				// Si la lista está vacía, muestra un mensaje
				if (listaProductos.length === 0) {
					tabla.append("<tr><td colspan='6'>No hay productos seleccionados</td></tr>");
				}

				$(".btnEliminarProducto").click(function () {
					var index = $(this).data("index");
					var producto = listaProductos[index];
					var filaInventario = $("tr:has(button[data-id='" + producto.IdProducto + "'])");
					var cantidadDisponibleActual = parseInt(filaInventario.find('.cantidad-disponible').text());
					var nuevaCantidadDisponible = cantidadDisponibleActual + producto.CantidadSeleccionada;

					filaInventario.find('.cantidad-disponible').text(nuevaCantidadDisponible);
					filaInventario.find('.cantidad-input').attr('max', nuevaCantidadDisponible);
					filaInventario.find('.btnAgregarProducto').prop('disabled', false);

					listaProductos.splice(index, 1);
					actualizarTablaProductosSeleccionados();
				});
			}

			// Nuevo código: Manejo del envío del formulario
			$("#formCreatePedido").submit(function (e) {
				e.preventDefault();

				if (listaProductos.length === 0) {
					alert("Por favor, agregue al menos un producto al pedido.");
					return false;
				}

				if (!$("#FechaEntrega").val()) {
					alert("Por favor, seleccione una fecha de entrega.");
					return false;
				}

				if (!$("#IdSucursal").val()) {
					alert("Por favor, seleccione una sucursal.");
					return false;
				}

				$("#btnCrearPedido").prop('disabled', true).val('Procesando...');

				var formData = new FormData(this);
				formData.append("ProductosJson", JSON.stringify(listaProductos));

				$.ajax({
					url: this.action,
					type: this.method,
					data: formData,
					processData: false,
					contentType: false,
					success: function (result) {
						alert('Pedido guardado con éxito');
						window.location.href = '/Pedidos/Index';
					},
					error: function (error) {
						alert('Error al guardar el pedido: ' + error.responseText);
						// Restaurar las cantidades en la vista
						restaurarCantidades();
						// Volver a habilitar el botón de submit
						$("#btnCrearPedido").prop('disabled', false).val('Crear Pedido');
					}
				});
			});

			// Nueva función: Restaurar cantidades
			function restaurarCantidades() {
				listaProductos.forEach(function (producto) {
					var filaInventario = $("tr:has(button[data-id='" + producto.IdProducto + "'])");
					var cantidadDisponibleActual = parseInt(filaInventario.find('.cantidad-disponible').text());
					var nuevaCantidadDisponible = cantidadDisponibleActual + producto.CantidadSeleccionada;

					filaInventario.find('.cantidad-disponible').text(nuevaCantidadDisponible);
					filaInventario.find('.cantidad-input').attr('max', nuevaCantidadDisponible);
					filaInventario.find('.btnAgregarProducto').prop('disabled', false);
				});

				// Limpiar la lista de productos seleccionados
				listaProductos = [];
				actualizarTablaProductosSeleccionados();
			}
		});
	</script>
}